

<script>

    const generateBtn = document.getElementById('generate-btn');
    const aiPromptInput = document.getElementById('ai-prompt');
    const codeEditor = document.getElementById('code-editor');
    const explanationContent = document.getElementById('explanation-content');
    const loadingIndicator = document.getElementById('loading-indicator');
    const errorMessage = document.getElementById('error-message');
    const livePreviewBody = document.getElementById('live-preview-body');
    const chatHistory = document.getElementById('chat-history');
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');

    const initialCode = `null`;

    const initialPreview = `<div class="h-full flex flex-col items-center justify-center text-center text-slate-500">
        <i class="fas fa-rocket text-5xl mb-4 text-slate-300"></i>
        <h2 class="text-xl font-bold text-slate-700">Aplikasi Anda Belum Dibuat</h2>
        <p>Gunakan chat di sebelah kiri untuk mulai membuat template Anda.</p>
    </div>`;

    function addChatMessage(sender, messageHtml) {
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('chat-message', sender);

        if (sender === 'user') {
            messageDiv.textContent = messageHtml;
        } else {
            messageDiv.innerHTML = `<div class="prose prose-slate max-w-none text-slate-700">${messageHtml}</div>`;
        }

        chatHistory.appendChild(messageDiv);
        chatHistory.scrollTop = chatHistory.scrollHeight;
    }

    async function fetchChatData(projectId) {
        try {
            const response = await fetch(`/ai_interactions/project/${projectId}`);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const chatData = await response.json();
            chatData.forEach(message => {
                addChatMessage(message.role, `${message.role} ${message.type_message} ${message.content}`); // Adjust based on your data structure
            });
        } catch (error) {
            console.error('Error fetching chat data:', error);
            showError("Failed to load chat data.");
        }
    }

    function initializeApp() {
        codeEditor.textContent = initialCode;
        livePreviewBody.innerHTML = initialPreview;

        const initialExplanation = `<h3>Selamat Datang di RailsGen AI!</h3>
            <p>Ini adalah prototipe untuk generator template aplikasi Rails. Gunakan kotak chat di bawah untuk memberi perintah kepada AI.</p> <p>Coba minta untuk <strong>"tambahkan autentikasi devise"</strong> atau <strong>"install tailwindcss"</strong>.</p>`;

        explanationContent.innerHTML = initialExplanation;
        fetchChatData(1);

        // check templaterb
    }

    initializeApp();

    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            const tabName = button.dataset.tab;
            tabButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            tabContents.forEach(content => content.classList.add('hidden'));
            document.getElementById(`${tabName}-panel`).classList.remove('hidden');
        });
    });

    async function getTemplateRb() {
        try {
            const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

            const response = await fetch('/ai_interactions/project/1/templaterb', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken, // Include the CSRF token
                },
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const code_template = await response.json();

            codeEditor.textContent = code_template.response;

        } catch (error) {
            console.log("gettemplate: ", error)
        }

    }

    getTemplateRb();


    generateBtn.addEventListener('click', () => {
        const userPrompt = aiPromptInput.value.trim();
        if (!userPrompt) {
            showError("Prompt tidak boleh kosong.");
            return;
        }
        addChatMessage('user', userPrompt);
        aiPromptInput.value = '';

        // Assuming you have a way to get the current project ID
        const currentProjectId = 1; // Replace with the actual project ID as needed
        generateWithAI(currentProjectId, userPrompt);
    });

    aiPromptInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') generateBtn.click(); });

    async function generateWithAI(projectId, prompt) {
        showLoading(true);
        hideError();

        const currentCode = codeEditor.textContent;

        // Get the CSRF token from the meta tag
        const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');


        try {
            const response = await fetch(`/ai_interactions/project/${projectId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken, // Include the CSRF token
                },
                body: JSON.stringify({ message: prompt, code: currentCode }), // Send prompt and current code
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const mockResponse = await response.json();
            codeEditor.textContent = mockResponse.code;
            // explanationContent.innerHTML = explanationHtml;
            livePreviewBody.innerHTML = mockResponse.previewHtml;
            addChatMessage('ai', mockResponse['response']);

        } catch (error) {
            console.error("Error with AI generation:", error);
            const errorText = "Maaf, terjadi kesalahan saat berkomunikasi dengan AI. Silakan coba lagi.";
            showError(errorText);
            addChatMessage('ai', errorText);
        } finally {
            showLoading(false);
        }
    }

    function showLoading(isLoading) {
        loadingIndicator.style.display = isLoading ? 'flex' : 'none';
        generateBtn.disabled = isLoading;
        generateBtn.style.opacity = isLoading ? '0.5' : '1';
    }

    function showError(message) {
        errorMessage.textContent = message;
        errorMessage.style.display = 'block';
    }

    function hideError() {
        errorMessage.style.display = 'none';
    }

</script>
